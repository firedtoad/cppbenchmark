// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: report.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_report_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_report_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_report_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_report_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_report_2eproto;
namespace pb_report {
class BattleForm;
struct BattleFormDefaultTypeInternal;
extern BattleFormDefaultTypeInternal _BattleForm_default_instance_;
class Ground;
struct GroundDefaultTypeInternal;
extern GroundDefaultTypeInternal _Ground_default_instance_;
class Property;
struct PropertyDefaultTypeInternal;
extern PropertyDefaultTypeInternal _Property_default_instance_;
class Unit;
struct UnitDefaultTypeInternal;
extern UnitDefaultTypeInternal _Unit_default_instance_;
}  // namespace pb_report
PROTOBUF_NAMESPACE_OPEN
template<> ::pb_report::BattleForm* Arena::CreateMaybeMessage<::pb_report::BattleForm>(Arena*);
template<> ::pb_report::Ground* Arena::CreateMaybeMessage<::pb_report::Ground>(Arena*);
template<> ::pb_report::Property* Arena::CreateMaybeMessage<::pb_report::Property>(Arena*);
template<> ::pb_report::Unit* Arena::CreateMaybeMessage<::pb_report::Unit>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb_report {

enum EProperty : int {
  Strength = 0,
  Physique = 1,
  MStrength = 2,
  MPhysique = 3,
  Hp = 4,
  MaxHp = 5,
  PDef = 6,
  MDef = 7,
  PAtk = 8,
  MAtk = 9,
  Critical = 10,
  CriticalRatio = 11,
  DeCritical = 12,
  DeCriticalRatio = 13,
  Suppress = 14,
  Dodge = 15,
  Penetrate = 16,
  PenetrateDmg = 17,
  Parry = 18,
  ParryDmp = 19,
  DmgAddRatio = 20,
  DmgSubRatio = 21,
  PhyDmgAddRatio = 22,
  PhyDmgSubRatio = 23,
  MagDmgAddRatio = 24,
  MagDmgSubRatio = 25,
  HealAddRatio = 26,
  HealSubRatio = 27,
  Combo = 28,
  Weapon = 29,
  Max = 32,
  EProperty_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  EProperty_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool EProperty_IsValid(int value);
constexpr EProperty EProperty_MIN = Strength;
constexpr EProperty EProperty_MAX = Max;
constexpr int EProperty_ARRAYSIZE = EProperty_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EProperty_descriptor();
template<typename T>
inline const std::string& EProperty_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EProperty>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EProperty_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EProperty_descriptor(), enum_t_value);
}
inline bool EProperty_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EProperty* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EProperty>(
    EProperty_descriptor(), name, value);
}
// ===================================================================

class Property final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb_report.Property) */ {
 public:
  inline Property() : Property(nullptr) {}
  ~Property() override;
  explicit PROTOBUF_CONSTEXPR Property(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Property(const Property& from);
  Property(Property&& from) noexcept
    : Property() {
    *this = ::std::move(from);
  }

  inline Property& operator=(const Property& from) {
    CopyFrom(from);
    return *this;
  }
  inline Property& operator=(Property&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Property& default_instance() {
    return *internal_default_instance();
  }
  static inline const Property* internal_default_instance() {
    return reinterpret_cast<const Property*>(
               &_Property_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Property& a, Property& b) {
    a.Swap(&b);
  }
  inline void Swap(Property* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Property* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Property* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Property>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Property& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Property& from) {
    Property::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Property* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb_report.Property";
  }
  protected:
  explicit Property(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kValFieldNumber = 2,
  };
  // uint32 id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // uint32 val = 2;
  void clear_val();
  uint32_t val() const;
  void set_val(uint32_t value);
  private:
  uint32_t _internal_val() const;
  void _internal_set_val(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:pb_report.Property)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t id_;
    uint32_t val_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_report_2eproto;
};
// -------------------------------------------------------------------

class Unit final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb_report.Unit) */ {
 public:
  inline Unit() : Unit(nullptr) {}
  ~Unit() override;
  explicit PROTOBUF_CONSTEXPR Unit(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Unit(const Unit& from);
  Unit(Unit&& from) noexcept
    : Unit() {
    *this = ::std::move(from);
  }

  inline Unit& operator=(const Unit& from) {
    CopyFrom(from);
    return *this;
  }
  inline Unit& operator=(Unit&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Unit& default_instance() {
    return *internal_default_instance();
  }
  static inline const Unit* internal_default_instance() {
    return reinterpret_cast<const Unit*>(
               &_Unit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Unit& a, Unit& b) {
    a.Swap(&b);
  }
  inline void Swap(Unit* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Unit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Unit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Unit>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Unit& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Unit& from) {
    Unit::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Unit* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb_report.Unit";
  }
  protected:
  explicit Unit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropSetFieldNumber = 7,
    kBuffersFieldNumber = 8,
    kPassiveSkillsFieldNumber = 14,
    kNameFieldNumber = 5,
    kIdFieldNumber = 1,
    kUidFieldNumber = 2,
    kStatusFieldNumber = 4,
    kPosFieldNumber = 3,
    kLevelFieldNumber = 6,
    kNormalSkillFieldNumber = 9,
    kAngerSkillFieldNumber = 10,
    kComboSkill1FieldNumber = 11,
    kComboSkill2FieldNumber = 12,
    kComboSkill3FieldNumber = 13,
  };
  // repeated .pb_report.Property prop_set = 7;
  int prop_set_size() const;
  private:
  int _internal_prop_set_size() const;
  public:
  void clear_prop_set();
  ::pb_report::Property* mutable_prop_set(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_report::Property >*
      mutable_prop_set();
  private:
  const ::pb_report::Property& _internal_prop_set(int index) const;
  ::pb_report::Property* _internal_add_prop_set();
  public:
  const ::pb_report::Property& prop_set(int index) const;
  ::pb_report::Property* add_prop_set();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_report::Property >&
      prop_set() const;

  // repeated uint32 buffers = 8;
  int buffers_size() const;
  private:
  int _internal_buffers_size() const;
  public:
  void clear_buffers();
  private:
  uint32_t _internal_buffers(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_buffers() const;
  void _internal_add_buffers(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_buffers();
  public:
  uint32_t buffers(int index) const;
  void set_buffers(int index, uint32_t value);
  void add_buffers(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      buffers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_buffers();

  // repeated uint32 passive_skills = 14;
  int passive_skills_size() const;
  private:
  int _internal_passive_skills_size() const;
  public:
  void clear_passive_skills();
  private:
  uint32_t _internal_passive_skills(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_passive_skills() const;
  void _internal_add_passive_skills(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_passive_skills();
  public:
  uint32_t passive_skills(int index) const;
  void set_passive_skills(int index, uint32_t value);
  void add_passive_skills(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      passive_skills() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_passive_skills();

  // string name = 5;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // uint32 uid = 2;
  void clear_uid();
  uint32_t uid() const;
  void set_uid(uint32_t value);
  private:
  uint32_t _internal_uid() const;
  void _internal_set_uid(uint32_t value);
  public:

  // uint64 status = 4;
  void clear_status();
  uint64_t status() const;
  void set_status(uint64_t value);
  private:
  uint64_t _internal_status() const;
  void _internal_set_status(uint64_t value);
  public:

  // uint32 pos = 3;
  void clear_pos();
  uint32_t pos() const;
  void set_pos(uint32_t value);
  private:
  uint32_t _internal_pos() const;
  void _internal_set_pos(uint32_t value);
  public:

  // uint32 level = 6;
  void clear_level();
  uint32_t level() const;
  void set_level(uint32_t value);
  private:
  uint32_t _internal_level() const;
  void _internal_set_level(uint32_t value);
  public:

  // uint32 normal_skill = 9;
  void clear_normal_skill();
  uint32_t normal_skill() const;
  void set_normal_skill(uint32_t value);
  private:
  uint32_t _internal_normal_skill() const;
  void _internal_set_normal_skill(uint32_t value);
  public:

  // uint32 anger_skill = 10;
  void clear_anger_skill();
  uint32_t anger_skill() const;
  void set_anger_skill(uint32_t value);
  private:
  uint32_t _internal_anger_skill() const;
  void _internal_set_anger_skill(uint32_t value);
  public:

  // uint32 combo_skill1 = 11;
  void clear_combo_skill1();
  uint32_t combo_skill1() const;
  void set_combo_skill1(uint32_t value);
  private:
  uint32_t _internal_combo_skill1() const;
  void _internal_set_combo_skill1(uint32_t value);
  public:

  // uint32 combo_skill2 = 12;
  void clear_combo_skill2();
  uint32_t combo_skill2() const;
  void set_combo_skill2(uint32_t value);
  private:
  uint32_t _internal_combo_skill2() const;
  void _internal_set_combo_skill2(uint32_t value);
  public:

  // uint32 combo_skill3 = 13;
  void clear_combo_skill3();
  uint32_t combo_skill3() const;
  void set_combo_skill3(uint32_t value);
  private:
  uint32_t _internal_combo_skill3() const;
  void _internal_set_combo_skill3(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:pb_report.Unit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_report::Property > prop_set_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > buffers_;
    mutable std::atomic<int> _buffers_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > passive_skills_;
    mutable std::atomic<int> _passive_skills_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    uint32_t id_;
    uint32_t uid_;
    uint64_t status_;
    uint32_t pos_;
    uint32_t level_;
    uint32_t normal_skill_;
    uint32_t anger_skill_;
    uint32_t combo_skill1_;
    uint32_t combo_skill2_;
    uint32_t combo_skill3_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_report_2eproto;
};
// -------------------------------------------------------------------

class BattleForm final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb_report.BattleForm) */ {
 public:
  inline BattleForm() : BattleForm(nullptr) {}
  ~BattleForm() override;
  explicit PROTOBUF_CONSTEXPR BattleForm(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BattleForm(const BattleForm& from);
  BattleForm(BattleForm&& from) noexcept
    : BattleForm() {
    *this = ::std::move(from);
  }

  inline BattleForm& operator=(const BattleForm& from) {
    CopyFrom(from);
    return *this;
  }
  inline BattleForm& operator=(BattleForm&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BattleForm& default_instance() {
    return *internal_default_instance();
  }
  static inline const BattleForm* internal_default_instance() {
    return reinterpret_cast<const BattleForm*>(
               &_BattleForm_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BattleForm& a, BattleForm& b) {
    a.Swap(&b);
  }
  inline void Swap(BattleForm* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BattleForm* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BattleForm* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BattleForm>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BattleForm& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BattleForm& from) {
    BattleForm::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BattleForm* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb_report.BattleForm";
  }
  protected:
  explicit BattleForm(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnitsFieldNumber = 2,
    kSupportFieldNumber = 3,
    kTeamIdFieldNumber = 1,
  };
  // repeated .pb_report.Unit units = 2;
  int units_size() const;
  private:
  int _internal_units_size() const;
  public:
  void clear_units();
  ::pb_report::Unit* mutable_units(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_report::Unit >*
      mutable_units();
  private:
  const ::pb_report::Unit& _internal_units(int index) const;
  ::pb_report::Unit* _internal_add_units();
  public:
  const ::pb_report::Unit& units(int index) const;
  ::pb_report::Unit* add_units();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_report::Unit >&
      units() const;

  // .pb_report.Unit support = 3;
  bool has_support() const;
  private:
  bool _internal_has_support() const;
  public:
  void clear_support();
  const ::pb_report::Unit& support() const;
  PROTOBUF_NODISCARD ::pb_report::Unit* release_support();
  ::pb_report::Unit* mutable_support();
  void set_allocated_support(::pb_report::Unit* support);
  private:
  const ::pb_report::Unit& _internal_support() const;
  ::pb_report::Unit* _internal_mutable_support();
  public:
  void unsafe_arena_set_allocated_support(
      ::pb_report::Unit* support);
  ::pb_report::Unit* unsafe_arena_release_support();

  // uint32 team_id = 1;
  void clear_team_id();
  uint32_t team_id() const;
  void set_team_id(uint32_t value);
  private:
  uint32_t _internal_team_id() const;
  void _internal_set_team_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:pb_report.BattleForm)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_report::Unit > units_;
    ::pb_report::Unit* support_;
    uint32_t team_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_report_2eproto;
};
// -------------------------------------------------------------------

class Ground final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb_report.Ground) */ {
 public:
  inline Ground() : Ground(nullptr) {}
  ~Ground() override;
  explicit PROTOBUF_CONSTEXPR Ground(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ground(const Ground& from);
  Ground(Ground&& from) noexcept
    : Ground() {
    *this = ::std::move(from);
  }

  inline Ground& operator=(const Ground& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ground& operator=(Ground&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ground& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ground* internal_default_instance() {
    return reinterpret_cast<const Ground*>(
               &_Ground_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Ground& a, Ground& b) {
    a.Swap(&b);
  }
  inline void Swap(Ground* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ground* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ground* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ground>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ground& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ground& from) {
    Ground::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ground* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb_report.Ground";
  }
  protected:
  explicit Ground(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttackerFormFieldNumber = 1,
    kDefenderFormFieldNumber = 2,
  };
  // repeated .pb_report.BattleForm attackerForm = 1;
  int attackerform_size() const;
  private:
  int _internal_attackerform_size() const;
  public:
  void clear_attackerform();
  ::pb_report::BattleForm* mutable_attackerform(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_report::BattleForm >*
      mutable_attackerform();
  private:
  const ::pb_report::BattleForm& _internal_attackerform(int index) const;
  ::pb_report::BattleForm* _internal_add_attackerform();
  public:
  const ::pb_report::BattleForm& attackerform(int index) const;
  ::pb_report::BattleForm* add_attackerform();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_report::BattleForm >&
      attackerform() const;

  // repeated .pb_report.BattleForm defenderForm = 2;
  int defenderform_size() const;
  private:
  int _internal_defenderform_size() const;
  public:
  void clear_defenderform();
  ::pb_report::BattleForm* mutable_defenderform(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_report::BattleForm >*
      mutable_defenderform();
  private:
  const ::pb_report::BattleForm& _internal_defenderform(int index) const;
  ::pb_report::BattleForm* _internal_add_defenderform();
  public:
  const ::pb_report::BattleForm& defenderform(int index) const;
  ::pb_report::BattleForm* add_defenderform();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_report::BattleForm >&
      defenderform() const;

  // @@protoc_insertion_point(class_scope:pb_report.Ground)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_report::BattleForm > attackerform_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_report::BattleForm > defenderform_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_report_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Property

// uint32 id = 1;
inline void Property::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t Property::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t Property::id() const {
  // @@protoc_insertion_point(field_get:pb_report.Property.id)
  return _internal_id();
}
inline void Property::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void Property::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:pb_report.Property.id)
}

// uint32 val = 2;
inline void Property::clear_val() {
  _impl_.val_ = 0u;
}
inline uint32_t Property::_internal_val() const {
  return _impl_.val_;
}
inline uint32_t Property::val() const {
  // @@protoc_insertion_point(field_get:pb_report.Property.val)
  return _internal_val();
}
inline void Property::_internal_set_val(uint32_t value) {
  
  _impl_.val_ = value;
}
inline void Property::set_val(uint32_t value) {
  _internal_set_val(value);
  // @@protoc_insertion_point(field_set:pb_report.Property.val)
}

// -------------------------------------------------------------------

// Unit

// uint32 id = 1;
inline void Unit::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t Unit::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t Unit::id() const {
  // @@protoc_insertion_point(field_get:pb_report.Unit.id)
  return _internal_id();
}
inline void Unit::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void Unit::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:pb_report.Unit.id)
}

// uint32 uid = 2;
inline void Unit::clear_uid() {
  _impl_.uid_ = 0u;
}
inline uint32_t Unit::_internal_uid() const {
  return _impl_.uid_;
}
inline uint32_t Unit::uid() const {
  // @@protoc_insertion_point(field_get:pb_report.Unit.uid)
  return _internal_uid();
}
inline void Unit::_internal_set_uid(uint32_t value) {
  
  _impl_.uid_ = value;
}
inline void Unit::set_uid(uint32_t value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:pb_report.Unit.uid)
}

// uint32 pos = 3;
inline void Unit::clear_pos() {
  _impl_.pos_ = 0u;
}
inline uint32_t Unit::_internal_pos() const {
  return _impl_.pos_;
}
inline uint32_t Unit::pos() const {
  // @@protoc_insertion_point(field_get:pb_report.Unit.pos)
  return _internal_pos();
}
inline void Unit::_internal_set_pos(uint32_t value) {
  
  _impl_.pos_ = value;
}
inline void Unit::set_pos(uint32_t value) {
  _internal_set_pos(value);
  // @@protoc_insertion_point(field_set:pb_report.Unit.pos)
}

// uint64 status = 4;
inline void Unit::clear_status() {
  _impl_.status_ = uint64_t{0u};
}
inline uint64_t Unit::_internal_status() const {
  return _impl_.status_;
}
inline uint64_t Unit::status() const {
  // @@protoc_insertion_point(field_get:pb_report.Unit.status)
  return _internal_status();
}
inline void Unit::_internal_set_status(uint64_t value) {
  
  _impl_.status_ = value;
}
inline void Unit::set_status(uint64_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:pb_report.Unit.status)
}

// string name = 5;
inline void Unit::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Unit::name() const {
  // @@protoc_insertion_point(field_get:pb_report.Unit.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Unit::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb_report.Unit.name)
}
inline std::string* Unit::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:pb_report.Unit.name)
  return _s;
}
inline const std::string& Unit::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Unit::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Unit::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Unit::release_name() {
  // @@protoc_insertion_point(field_release:pb_report.Unit.name)
  return _impl_.name_.Release();
}
inline void Unit::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pb_report.Unit.name)
}

// uint32 level = 6;
inline void Unit::clear_level() {
  _impl_.level_ = 0u;
}
inline uint32_t Unit::_internal_level() const {
  return _impl_.level_;
}
inline uint32_t Unit::level() const {
  // @@protoc_insertion_point(field_get:pb_report.Unit.level)
  return _internal_level();
}
inline void Unit::_internal_set_level(uint32_t value) {
  
  _impl_.level_ = value;
}
inline void Unit::set_level(uint32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:pb_report.Unit.level)
}

// repeated .pb_report.Property prop_set = 7;
inline int Unit::_internal_prop_set_size() const {
  return _impl_.prop_set_.size();
}
inline int Unit::prop_set_size() const {
  return _internal_prop_set_size();
}
inline void Unit::clear_prop_set() {
  _impl_.prop_set_.Clear();
}
inline ::pb_report::Property* Unit::mutable_prop_set(int index) {
  // @@protoc_insertion_point(field_mutable:pb_report.Unit.prop_set)
  return _impl_.prop_set_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_report::Property >*
Unit::mutable_prop_set() {
  // @@protoc_insertion_point(field_mutable_list:pb_report.Unit.prop_set)
  return &_impl_.prop_set_;
}
inline const ::pb_report::Property& Unit::_internal_prop_set(int index) const {
  return _impl_.prop_set_.Get(index);
}
inline const ::pb_report::Property& Unit::prop_set(int index) const {
  // @@protoc_insertion_point(field_get:pb_report.Unit.prop_set)
  return _internal_prop_set(index);
}
inline ::pb_report::Property* Unit::_internal_add_prop_set() {
  return _impl_.prop_set_.Add();
}
inline ::pb_report::Property* Unit::add_prop_set() {
  ::pb_report::Property* _add = _internal_add_prop_set();
  // @@protoc_insertion_point(field_add:pb_report.Unit.prop_set)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_report::Property >&
Unit::prop_set() const {
  // @@protoc_insertion_point(field_list:pb_report.Unit.prop_set)
  return _impl_.prop_set_;
}

// repeated uint32 buffers = 8;
inline int Unit::_internal_buffers_size() const {
  return _impl_.buffers_.size();
}
inline int Unit::buffers_size() const {
  return _internal_buffers_size();
}
inline void Unit::clear_buffers() {
  _impl_.buffers_.Clear();
}
inline uint32_t Unit::_internal_buffers(int index) const {
  return _impl_.buffers_.Get(index);
}
inline uint32_t Unit::buffers(int index) const {
  // @@protoc_insertion_point(field_get:pb_report.Unit.buffers)
  return _internal_buffers(index);
}
inline void Unit::set_buffers(int index, uint32_t value) {
  _impl_.buffers_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb_report.Unit.buffers)
}
inline void Unit::_internal_add_buffers(uint32_t value) {
  _impl_.buffers_.Add(value);
}
inline void Unit::add_buffers(uint32_t value) {
  _internal_add_buffers(value);
  // @@protoc_insertion_point(field_add:pb_report.Unit.buffers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Unit::_internal_buffers() const {
  return _impl_.buffers_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Unit::buffers() const {
  // @@protoc_insertion_point(field_list:pb_report.Unit.buffers)
  return _internal_buffers();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Unit::_internal_mutable_buffers() {
  return &_impl_.buffers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Unit::mutable_buffers() {
  // @@protoc_insertion_point(field_mutable_list:pb_report.Unit.buffers)
  return _internal_mutable_buffers();
}

// uint32 normal_skill = 9;
inline void Unit::clear_normal_skill() {
  _impl_.normal_skill_ = 0u;
}
inline uint32_t Unit::_internal_normal_skill() const {
  return _impl_.normal_skill_;
}
inline uint32_t Unit::normal_skill() const {
  // @@protoc_insertion_point(field_get:pb_report.Unit.normal_skill)
  return _internal_normal_skill();
}
inline void Unit::_internal_set_normal_skill(uint32_t value) {
  
  _impl_.normal_skill_ = value;
}
inline void Unit::set_normal_skill(uint32_t value) {
  _internal_set_normal_skill(value);
  // @@protoc_insertion_point(field_set:pb_report.Unit.normal_skill)
}

// uint32 anger_skill = 10;
inline void Unit::clear_anger_skill() {
  _impl_.anger_skill_ = 0u;
}
inline uint32_t Unit::_internal_anger_skill() const {
  return _impl_.anger_skill_;
}
inline uint32_t Unit::anger_skill() const {
  // @@protoc_insertion_point(field_get:pb_report.Unit.anger_skill)
  return _internal_anger_skill();
}
inline void Unit::_internal_set_anger_skill(uint32_t value) {
  
  _impl_.anger_skill_ = value;
}
inline void Unit::set_anger_skill(uint32_t value) {
  _internal_set_anger_skill(value);
  // @@protoc_insertion_point(field_set:pb_report.Unit.anger_skill)
}

// uint32 combo_skill1 = 11;
inline void Unit::clear_combo_skill1() {
  _impl_.combo_skill1_ = 0u;
}
inline uint32_t Unit::_internal_combo_skill1() const {
  return _impl_.combo_skill1_;
}
inline uint32_t Unit::combo_skill1() const {
  // @@protoc_insertion_point(field_get:pb_report.Unit.combo_skill1)
  return _internal_combo_skill1();
}
inline void Unit::_internal_set_combo_skill1(uint32_t value) {
  
  _impl_.combo_skill1_ = value;
}
inline void Unit::set_combo_skill1(uint32_t value) {
  _internal_set_combo_skill1(value);
  // @@protoc_insertion_point(field_set:pb_report.Unit.combo_skill1)
}

// uint32 combo_skill2 = 12;
inline void Unit::clear_combo_skill2() {
  _impl_.combo_skill2_ = 0u;
}
inline uint32_t Unit::_internal_combo_skill2() const {
  return _impl_.combo_skill2_;
}
inline uint32_t Unit::combo_skill2() const {
  // @@protoc_insertion_point(field_get:pb_report.Unit.combo_skill2)
  return _internal_combo_skill2();
}
inline void Unit::_internal_set_combo_skill2(uint32_t value) {
  
  _impl_.combo_skill2_ = value;
}
inline void Unit::set_combo_skill2(uint32_t value) {
  _internal_set_combo_skill2(value);
  // @@protoc_insertion_point(field_set:pb_report.Unit.combo_skill2)
}

// uint32 combo_skill3 = 13;
inline void Unit::clear_combo_skill3() {
  _impl_.combo_skill3_ = 0u;
}
inline uint32_t Unit::_internal_combo_skill3() const {
  return _impl_.combo_skill3_;
}
inline uint32_t Unit::combo_skill3() const {
  // @@protoc_insertion_point(field_get:pb_report.Unit.combo_skill3)
  return _internal_combo_skill3();
}
inline void Unit::_internal_set_combo_skill3(uint32_t value) {
  
  _impl_.combo_skill3_ = value;
}
inline void Unit::set_combo_skill3(uint32_t value) {
  _internal_set_combo_skill3(value);
  // @@protoc_insertion_point(field_set:pb_report.Unit.combo_skill3)
}

// repeated uint32 passive_skills = 14;
inline int Unit::_internal_passive_skills_size() const {
  return _impl_.passive_skills_.size();
}
inline int Unit::passive_skills_size() const {
  return _internal_passive_skills_size();
}
inline void Unit::clear_passive_skills() {
  _impl_.passive_skills_.Clear();
}
inline uint32_t Unit::_internal_passive_skills(int index) const {
  return _impl_.passive_skills_.Get(index);
}
inline uint32_t Unit::passive_skills(int index) const {
  // @@protoc_insertion_point(field_get:pb_report.Unit.passive_skills)
  return _internal_passive_skills(index);
}
inline void Unit::set_passive_skills(int index, uint32_t value) {
  _impl_.passive_skills_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb_report.Unit.passive_skills)
}
inline void Unit::_internal_add_passive_skills(uint32_t value) {
  _impl_.passive_skills_.Add(value);
}
inline void Unit::add_passive_skills(uint32_t value) {
  _internal_add_passive_skills(value);
  // @@protoc_insertion_point(field_add:pb_report.Unit.passive_skills)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Unit::_internal_passive_skills() const {
  return _impl_.passive_skills_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Unit::passive_skills() const {
  // @@protoc_insertion_point(field_list:pb_report.Unit.passive_skills)
  return _internal_passive_skills();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Unit::_internal_mutable_passive_skills() {
  return &_impl_.passive_skills_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Unit::mutable_passive_skills() {
  // @@protoc_insertion_point(field_mutable_list:pb_report.Unit.passive_skills)
  return _internal_mutable_passive_skills();
}

// -------------------------------------------------------------------

// BattleForm

// uint32 team_id = 1;
inline void BattleForm::clear_team_id() {
  _impl_.team_id_ = 0u;
}
inline uint32_t BattleForm::_internal_team_id() const {
  return _impl_.team_id_;
}
inline uint32_t BattleForm::team_id() const {
  // @@protoc_insertion_point(field_get:pb_report.BattleForm.team_id)
  return _internal_team_id();
}
inline void BattleForm::_internal_set_team_id(uint32_t value) {
  
  _impl_.team_id_ = value;
}
inline void BattleForm::set_team_id(uint32_t value) {
  _internal_set_team_id(value);
  // @@protoc_insertion_point(field_set:pb_report.BattleForm.team_id)
}

// repeated .pb_report.Unit units = 2;
inline int BattleForm::_internal_units_size() const {
  return _impl_.units_.size();
}
inline int BattleForm::units_size() const {
  return _internal_units_size();
}
inline void BattleForm::clear_units() {
  _impl_.units_.Clear();
}
inline ::pb_report::Unit* BattleForm::mutable_units(int index) {
  // @@protoc_insertion_point(field_mutable:pb_report.BattleForm.units)
  return _impl_.units_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_report::Unit >*
BattleForm::mutable_units() {
  // @@protoc_insertion_point(field_mutable_list:pb_report.BattleForm.units)
  return &_impl_.units_;
}
inline const ::pb_report::Unit& BattleForm::_internal_units(int index) const {
  return _impl_.units_.Get(index);
}
inline const ::pb_report::Unit& BattleForm::units(int index) const {
  // @@protoc_insertion_point(field_get:pb_report.BattleForm.units)
  return _internal_units(index);
}
inline ::pb_report::Unit* BattleForm::_internal_add_units() {
  return _impl_.units_.Add();
}
inline ::pb_report::Unit* BattleForm::add_units() {
  ::pb_report::Unit* _add = _internal_add_units();
  // @@protoc_insertion_point(field_add:pb_report.BattleForm.units)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_report::Unit >&
BattleForm::units() const {
  // @@protoc_insertion_point(field_list:pb_report.BattleForm.units)
  return _impl_.units_;
}

// .pb_report.Unit support = 3;
inline bool BattleForm::_internal_has_support() const {
  return this != internal_default_instance() && _impl_.support_ != nullptr;
}
inline bool BattleForm::has_support() const {
  return _internal_has_support();
}
inline void BattleForm::clear_support() {
  if (GetArenaForAllocation() == nullptr && _impl_.support_ != nullptr) {
    delete _impl_.support_;
  }
  _impl_.support_ = nullptr;
}
inline const ::pb_report::Unit& BattleForm::_internal_support() const {
  const ::pb_report::Unit* p = _impl_.support_;
  return p != nullptr ? *p : reinterpret_cast<const ::pb_report::Unit&>(
      ::pb_report::_Unit_default_instance_);
}
inline const ::pb_report::Unit& BattleForm::support() const {
  // @@protoc_insertion_point(field_get:pb_report.BattleForm.support)
  return _internal_support();
}
inline void BattleForm::unsafe_arena_set_allocated_support(
    ::pb_report::Unit* support) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.support_);
  }
  _impl_.support_ = support;
  if (support) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb_report.BattleForm.support)
}
inline ::pb_report::Unit* BattleForm::release_support() {
  
  ::pb_report::Unit* temp = _impl_.support_;
  _impl_.support_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pb_report::Unit* BattleForm::unsafe_arena_release_support() {
  // @@protoc_insertion_point(field_release:pb_report.BattleForm.support)
  
  ::pb_report::Unit* temp = _impl_.support_;
  _impl_.support_ = nullptr;
  return temp;
}
inline ::pb_report::Unit* BattleForm::_internal_mutable_support() {
  
  if (_impl_.support_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb_report::Unit>(GetArenaForAllocation());
    _impl_.support_ = p;
  }
  return _impl_.support_;
}
inline ::pb_report::Unit* BattleForm::mutable_support() {
  ::pb_report::Unit* _msg = _internal_mutable_support();
  // @@protoc_insertion_point(field_mutable:pb_report.BattleForm.support)
  return _msg;
}
inline void BattleForm::set_allocated_support(::pb_report::Unit* support) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.support_;
  }
  if (support) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(support);
    if (message_arena != submessage_arena) {
      support = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, support, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.support_ = support;
  // @@protoc_insertion_point(field_set_allocated:pb_report.BattleForm.support)
}

// -------------------------------------------------------------------

// Ground

// repeated .pb_report.BattleForm attackerForm = 1;
inline int Ground::_internal_attackerform_size() const {
  return _impl_.attackerform_.size();
}
inline int Ground::attackerform_size() const {
  return _internal_attackerform_size();
}
inline void Ground::clear_attackerform() {
  _impl_.attackerform_.Clear();
}
inline ::pb_report::BattleForm* Ground::mutable_attackerform(int index) {
  // @@protoc_insertion_point(field_mutable:pb_report.Ground.attackerForm)
  return _impl_.attackerform_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_report::BattleForm >*
Ground::mutable_attackerform() {
  // @@protoc_insertion_point(field_mutable_list:pb_report.Ground.attackerForm)
  return &_impl_.attackerform_;
}
inline const ::pb_report::BattleForm& Ground::_internal_attackerform(int index) const {
  return _impl_.attackerform_.Get(index);
}
inline const ::pb_report::BattleForm& Ground::attackerform(int index) const {
  // @@protoc_insertion_point(field_get:pb_report.Ground.attackerForm)
  return _internal_attackerform(index);
}
inline ::pb_report::BattleForm* Ground::_internal_add_attackerform() {
  return _impl_.attackerform_.Add();
}
inline ::pb_report::BattleForm* Ground::add_attackerform() {
  ::pb_report::BattleForm* _add = _internal_add_attackerform();
  // @@protoc_insertion_point(field_add:pb_report.Ground.attackerForm)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_report::BattleForm >&
Ground::attackerform() const {
  // @@protoc_insertion_point(field_list:pb_report.Ground.attackerForm)
  return _impl_.attackerform_;
}

// repeated .pb_report.BattleForm defenderForm = 2;
inline int Ground::_internal_defenderform_size() const {
  return _impl_.defenderform_.size();
}
inline int Ground::defenderform_size() const {
  return _internal_defenderform_size();
}
inline void Ground::clear_defenderform() {
  _impl_.defenderform_.Clear();
}
inline ::pb_report::BattleForm* Ground::mutable_defenderform(int index) {
  // @@protoc_insertion_point(field_mutable:pb_report.Ground.defenderForm)
  return _impl_.defenderform_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_report::BattleForm >*
Ground::mutable_defenderform() {
  // @@protoc_insertion_point(field_mutable_list:pb_report.Ground.defenderForm)
  return &_impl_.defenderform_;
}
inline const ::pb_report::BattleForm& Ground::_internal_defenderform(int index) const {
  return _impl_.defenderform_.Get(index);
}
inline const ::pb_report::BattleForm& Ground::defenderform(int index) const {
  // @@protoc_insertion_point(field_get:pb_report.Ground.defenderForm)
  return _internal_defenderform(index);
}
inline ::pb_report::BattleForm* Ground::_internal_add_defenderform() {
  return _impl_.defenderform_.Add();
}
inline ::pb_report::BattleForm* Ground::add_defenderform() {
  ::pb_report::BattleForm* _add = _internal_add_defenderform();
  // @@protoc_insertion_point(field_add:pb_report.Ground.defenderForm)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_report::BattleForm >&
Ground::defenderform() const {
  // @@protoc_insertion_point(field_list:pb_report.Ground.defenderForm)
  return _impl_.defenderform_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb_report

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::pb_report::EProperty> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb_report::EProperty>() {
  return ::pb_report::EProperty_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_report_2eproto
