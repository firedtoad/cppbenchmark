// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: report.proto

#include "report.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace pb_report {
PROTOBUF_CONSTEXPR Property::Property(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_.val_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PropertyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PropertyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PropertyDefaultTypeInternal() {}
  union {
    Property _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PropertyDefaultTypeInternal _Property_default_instance_;
PROTOBUF_CONSTEXPR Unit::Unit(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.prop_set_)*/{}
  , /*decltype(_impl_.buffers_)*/{}
  , /*decltype(_impl_._buffers_cached_byte_size_)*/{0}
  , /*decltype(_impl_.passive_skills_)*/{}
  , /*decltype(_impl_._passive_skills_cached_byte_size_)*/{0}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_.uid_)*/0u
  , /*decltype(_impl_.status_)*/uint64_t{0u}
  , /*decltype(_impl_.pos_)*/0u
  , /*decltype(_impl_.level_)*/0u
  , /*decltype(_impl_.normal_skill_)*/0u
  , /*decltype(_impl_.anger_skill_)*/0u
  , /*decltype(_impl_.combo_skill1_)*/0u
  , /*decltype(_impl_.combo_skill2_)*/0u
  , /*decltype(_impl_.combo_skill3_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UnitDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UnitDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UnitDefaultTypeInternal() {}
  union {
    Unit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UnitDefaultTypeInternal _Unit_default_instance_;
PROTOBUF_CONSTEXPR BattleForm::BattleForm(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.units_)*/{}
  , /*decltype(_impl_.support_)*/nullptr
  , /*decltype(_impl_.team_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BattleFormDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BattleFormDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BattleFormDefaultTypeInternal() {}
  union {
    BattleForm _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BattleFormDefaultTypeInternal _BattleForm_default_instance_;
PROTOBUF_CONSTEXPR Ground::Ground(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.attackerform_)*/{}
  , /*decltype(_impl_.defenderform_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GroundDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GroundDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GroundDefaultTypeInternal() {}
  union {
    Ground _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GroundDefaultTypeInternal _Ground_default_instance_;
}  // namespace pb_report
static ::_pb::Metadata file_level_metadata_report_2eproto[4];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_report_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_report_2eproto = nullptr;

const uint32_t TableStruct_report_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb_report::Property, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb_report::Property, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::pb_report::Property, _impl_.val_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb_report::Unit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb_report::Unit, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::pb_report::Unit, _impl_.uid_),
  PROTOBUF_FIELD_OFFSET(::pb_report::Unit, _impl_.pos_),
  PROTOBUF_FIELD_OFFSET(::pb_report::Unit, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::pb_report::Unit, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::pb_report::Unit, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::pb_report::Unit, _impl_.prop_set_),
  PROTOBUF_FIELD_OFFSET(::pb_report::Unit, _impl_.buffers_),
  PROTOBUF_FIELD_OFFSET(::pb_report::Unit, _impl_.normal_skill_),
  PROTOBUF_FIELD_OFFSET(::pb_report::Unit, _impl_.anger_skill_),
  PROTOBUF_FIELD_OFFSET(::pb_report::Unit, _impl_.combo_skill1_),
  PROTOBUF_FIELD_OFFSET(::pb_report::Unit, _impl_.combo_skill2_),
  PROTOBUF_FIELD_OFFSET(::pb_report::Unit, _impl_.combo_skill3_),
  PROTOBUF_FIELD_OFFSET(::pb_report::Unit, _impl_.passive_skills_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb_report::BattleForm, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb_report::BattleForm, _impl_.team_id_),
  PROTOBUF_FIELD_OFFSET(::pb_report::BattleForm, _impl_.units_),
  PROTOBUF_FIELD_OFFSET(::pb_report::BattleForm, _impl_.support_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb_report::Ground, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb_report::Ground, _impl_.attackerform_),
  PROTOBUF_FIELD_OFFSET(::pb_report::Ground, _impl_.defenderform_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::pb_report::Property)},
  { 8, -1, -1, sizeof(::pb_report::Unit)},
  { 28, -1, -1, sizeof(::pb_report::BattleForm)},
  { 37, -1, -1, sizeof(::pb_report::Ground)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::pb_report::_Property_default_instance_._instance,
  &::pb_report::_Unit_default_instance_._instance,
  &::pb_report::_BattleForm_default_instance_._instance,
  &::pb_report::_Ground_default_instance_._instance,
};

const char descriptor_table_protodef_report_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014report.proto\022\tpb_report\"#\n\010Property\022\n\n"
  "\002id\030\001 \001(\r\022\013\n\003val\030\002 \001(\r\"\226\002\n\004Unit\022\n\n\002id\030\001 "
  "\001(\r\022\013\n\003uid\030\002 \001(\r\022\013\n\003pos\030\003 \001(\r\022\016\n\006status\030"
  "\004 \001(\004\022\014\n\004name\030\005 \001(\t\022\r\n\005level\030\006 \001(\r\022%\n\010pr"
  "op_set\030\007 \003(\0132\023.pb_report.Property\022\017\n\007buf"
  "fers\030\010 \003(\r\022\024\n\014normal_skill\030\t \001(\r\022\023\n\013ange"
  "r_skill\030\n \001(\r\022\024\n\014combo_skill1\030\013 \001(\r\022\024\n\014c"
  "ombo_skill2\030\014 \001(\r\022\024\n\014combo_skill3\030\r \001(\r\022"
  "\026\n\016passive_skills\030\016 \003(\r\"_\n\nBattleForm\022\017\n"
  "\007team_id\030\001 \001(\r\022\036\n\005units\030\002 \003(\0132\017.pb_repor"
  "t.Unit\022 \n\007support\030\003 \001(\0132\017.pb_report.Unit"
  "\"b\n\006Ground\022+\n\014attackerForm\030\001 \003(\0132\025.pb_re"
  "port.BattleForm\022+\n\014defenderForm\030\002 \003(\0132\025."
  "pb_report.BattleForm*\317\003\n\tEProperty\022\014\n\010St"
  "rength\020\000\022\014\n\010Physique\020\001\022\r\n\tMStrength\020\002\022\r\n"
  "\tMPhysique\020\003\022\006\n\002Hp\020\004\022\t\n\005MaxHp\020\005\022\010\n\004PDef\020"
  "\006\022\010\n\004MDef\020\007\022\010\n\004PAtk\020\010\022\010\n\004MAtk\020\t\022\014\n\010Criti"
  "cal\020\n\022\021\n\rCriticalRatio\020\013\022\016\n\nDeCritical\020\014"
  "\022\023\n\017DeCriticalRatio\020\r\022\014\n\010Suppress\020\016\022\t\n\005D"
  "odge\020\017\022\r\n\tPenetrate\020\020\022\020\n\014PenetrateDmg\020\021\022"
  "\t\n\005Parry\020\022\022\014\n\010ParryDmp\020\023\022\017\n\013DmgAddRatio\020"
  "\024\022\017\n\013DmgSubRatio\020\025\022\022\n\016PhyDmgAddRatio\020\026\022\022"
  "\n\016PhyDmgSubRatio\020\027\022\022\n\016MagDmgAddRatio\020\030\022\022"
  "\n\016MagDmgSubRatio\020\031\022\020\n\014HealAddRatio\020\032\022\020\n\014"
  "HealSubRatio\020\033\022\t\n\005Combo\020\034\022\n\n\006Weapon\020\035\022\007\n"
  "\003Max\020 B\003\370\001\001b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_report_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_report_2eproto = {
    false, false, 1019, descriptor_table_protodef_report_2eproto,
    "report.proto",
    &descriptor_table_report_2eproto_once, nullptr, 0, 4,
    schemas, file_default_instances, TableStruct_report_2eproto::offsets,
    file_level_metadata_report_2eproto, file_level_enum_descriptors_report_2eproto,
    file_level_service_descriptors_report_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_report_2eproto_getter() {
  return &descriptor_table_report_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_report_2eproto(&descriptor_table_report_2eproto);
namespace pb_report {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EProperty_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_report_2eproto);
  return file_level_enum_descriptors_report_2eproto[0];
}
bool EProperty_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 32:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Property::_Internal {
 public:
};

Property::Property(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pb_report.Property)
}
Property::Property(const Property& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Property* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.val_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.val_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.val_));
  // @@protoc_insertion_point(copy_constructor:pb_report.Property)
}

inline void Property::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){0u}
    , decltype(_impl_.val_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Property::~Property() {
  // @@protoc_insertion_point(destructor:pb_report.Property)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Property::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Property::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Property::Clear() {
// @@protoc_insertion_point(message_clear_start:pb_report.Property)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.val_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.val_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Property::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 val = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Property::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_report.Property)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // uint32 val = 2;
  if (this->_internal_val() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_val(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_report.Property)
  return target;
}

size_t Property::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb_report.Property)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  // uint32 val = 2;
  if (this->_internal_val() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_val());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Property::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Property::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Property::GetClassData() const { return &_class_data_; }


void Property::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Property*>(&to_msg);
  auto& from = static_cast<const Property&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pb_report.Property)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_val() != 0) {
    _this->_internal_set_val(from._internal_val());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Property::CopyFrom(const Property& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb_report.Property)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Property::IsInitialized() const {
  return true;
}

void Property::InternalSwap(Property* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Property, _impl_.val_)
      + sizeof(Property::_impl_.val_)
      - PROTOBUF_FIELD_OFFSET(Property, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Property::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_report_2eproto_getter, &descriptor_table_report_2eproto_once,
      file_level_metadata_report_2eproto[0]);
}

// ===================================================================

class Unit::_Internal {
 public:
};

Unit::Unit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pb_report.Unit)
}
Unit::Unit(const Unit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Unit* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.prop_set_){from._impl_.prop_set_}
    , decltype(_impl_.buffers_){from._impl_.buffers_}
    , /*decltype(_impl_._buffers_cached_byte_size_)*/{0}
    , decltype(_impl_.passive_skills_){from._impl_.passive_skills_}
    , /*decltype(_impl_._passive_skills_cached_byte_size_)*/{0}
    , decltype(_impl_.name_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.uid_){}
    , decltype(_impl_.status_){}
    , decltype(_impl_.pos_){}
    , decltype(_impl_.level_){}
    , decltype(_impl_.normal_skill_){}
    , decltype(_impl_.anger_skill_){}
    , decltype(_impl_.combo_skill1_){}
    , decltype(_impl_.combo_skill2_){}
    , decltype(_impl_.combo_skill3_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.combo_skill3_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.combo_skill3_));
  // @@protoc_insertion_point(copy_constructor:pb_report.Unit)
}

inline void Unit::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.prop_set_){arena}
    , decltype(_impl_.buffers_){arena}
    , /*decltype(_impl_._buffers_cached_byte_size_)*/{0}
    , decltype(_impl_.passive_skills_){arena}
    , /*decltype(_impl_._passive_skills_cached_byte_size_)*/{0}
    , decltype(_impl_.name_){}
    , decltype(_impl_.id_){0u}
    , decltype(_impl_.uid_){0u}
    , decltype(_impl_.status_){uint64_t{0u}}
    , decltype(_impl_.pos_){0u}
    , decltype(_impl_.level_){0u}
    , decltype(_impl_.normal_skill_){0u}
    , decltype(_impl_.anger_skill_){0u}
    , decltype(_impl_.combo_skill1_){0u}
    , decltype(_impl_.combo_skill2_){0u}
    , decltype(_impl_.combo_skill3_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Unit::~Unit() {
  // @@protoc_insertion_point(destructor:pb_report.Unit)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Unit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.prop_set_.~RepeatedPtrField();
  _impl_.buffers_.~RepeatedField();
  _impl_.passive_skills_.~RepeatedField();
  _impl_.name_.Destroy();
}

void Unit::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Unit::Clear() {
// @@protoc_insertion_point(message_clear_start:pb_report.Unit)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.prop_set_.Clear();
  _impl_.buffers_.Clear();
  _impl_.passive_skills_.Clear();
  _impl_.name_.ClearToEmpty();
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.combo_skill3_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.combo_skill3_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Unit::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 pos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.pos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pb_report.Unit.name"));
        } else
          goto handle_unusual;
        continue;
      // uint32 level = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .pb_report.Property prop_set = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_prop_set(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 buffers = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_buffers(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 64) {
          _internal_add_buffers(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 normal_skill = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.normal_skill_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 anger_skill = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.anger_skill_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 combo_skill1 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.combo_skill1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 combo_skill2 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.combo_skill2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 combo_skill3 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.combo_skill3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 passive_skills = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_passive_skills(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 112) {
          _internal_add_passive_skills(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Unit::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_report.Unit)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // uint32 uid = 2;
  if (this->_internal_uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_uid(), target);
  }

  // uint32 pos = 3;
  if (this->_internal_pos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_pos(), target);
  }

  // uint64 status = 4;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_status(), target);
  }

  // string name = 5;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb_report.Unit.name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_name(), target);
  }

  // uint32 level = 6;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_level(), target);
  }

  // repeated .pb_report.Property prop_set = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_prop_set_size()); i < n; i++) {
    const auto& repfield = this->_internal_prop_set(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated uint32 buffers = 8;
  {
    int byte_size = _impl_._buffers_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          8, _internal_buffers(), byte_size, target);
    }
  }

  // uint32 normal_skill = 9;
  if (this->_internal_normal_skill() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_normal_skill(), target);
  }

  // uint32 anger_skill = 10;
  if (this->_internal_anger_skill() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_anger_skill(), target);
  }

  // uint32 combo_skill1 = 11;
  if (this->_internal_combo_skill1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_combo_skill1(), target);
  }

  // uint32 combo_skill2 = 12;
  if (this->_internal_combo_skill2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_combo_skill2(), target);
  }

  // uint32 combo_skill3 = 13;
  if (this->_internal_combo_skill3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(13, this->_internal_combo_skill3(), target);
  }

  // repeated uint32 passive_skills = 14;
  {
    int byte_size = _impl_._passive_skills_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          14, _internal_passive_skills(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_report.Unit)
  return target;
}

size_t Unit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb_report.Unit)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb_report.Property prop_set = 7;
  total_size += 1UL * this->_internal_prop_set_size();
  for (const auto& msg : this->_impl_.prop_set_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 buffers = 8;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.buffers_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._buffers_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 passive_skills = 14;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.passive_skills_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._passive_skills_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string name = 5;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  // uint32 uid = 2;
  if (this->_internal_uid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_uid());
  }

  // uint64 status = 4;
  if (this->_internal_status() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_status());
  }

  // uint32 pos = 3;
  if (this->_internal_pos() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pos());
  }

  // uint32 level = 6;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_level());
  }

  // uint32 normal_skill = 9;
  if (this->_internal_normal_skill() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_normal_skill());
  }

  // uint32 anger_skill = 10;
  if (this->_internal_anger_skill() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_anger_skill());
  }

  // uint32 combo_skill1 = 11;
  if (this->_internal_combo_skill1() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_combo_skill1());
  }

  // uint32 combo_skill2 = 12;
  if (this->_internal_combo_skill2() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_combo_skill2());
  }

  // uint32 combo_skill3 = 13;
  if (this->_internal_combo_skill3() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_combo_skill3());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Unit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Unit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Unit::GetClassData() const { return &_class_data_; }


void Unit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Unit*>(&to_msg);
  auto& from = static_cast<const Unit&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pb_report.Unit)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.prop_set_.MergeFrom(from._impl_.prop_set_);
  _this->_impl_.buffers_.MergeFrom(from._impl_.buffers_);
  _this->_impl_.passive_skills_.MergeFrom(from._impl_.passive_skills_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_uid() != 0) {
    _this->_internal_set_uid(from._internal_uid());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  if (from._internal_pos() != 0) {
    _this->_internal_set_pos(from._internal_pos());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  if (from._internal_normal_skill() != 0) {
    _this->_internal_set_normal_skill(from._internal_normal_skill());
  }
  if (from._internal_anger_skill() != 0) {
    _this->_internal_set_anger_skill(from._internal_anger_skill());
  }
  if (from._internal_combo_skill1() != 0) {
    _this->_internal_set_combo_skill1(from._internal_combo_skill1());
  }
  if (from._internal_combo_skill2() != 0) {
    _this->_internal_set_combo_skill2(from._internal_combo_skill2());
  }
  if (from._internal_combo_skill3() != 0) {
    _this->_internal_set_combo_skill3(from._internal_combo_skill3());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Unit::CopyFrom(const Unit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb_report.Unit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Unit::IsInitialized() const {
  return true;
}

void Unit::InternalSwap(Unit* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.prop_set_.InternalSwap(&other->_impl_.prop_set_);
  _impl_.buffers_.InternalSwap(&other->_impl_.buffers_);
  _impl_.passive_skills_.InternalSwap(&other->_impl_.passive_skills_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Unit, _impl_.combo_skill3_)
      + sizeof(Unit::_impl_.combo_skill3_)
      - PROTOBUF_FIELD_OFFSET(Unit, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Unit::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_report_2eproto_getter, &descriptor_table_report_2eproto_once,
      file_level_metadata_report_2eproto[1]);
}

// ===================================================================

class BattleForm::_Internal {
 public:
  static const ::pb_report::Unit& support(const BattleForm* msg);
};

const ::pb_report::Unit&
BattleForm::_Internal::support(const BattleForm* msg) {
  return *msg->_impl_.support_;
}
BattleForm::BattleForm(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pb_report.BattleForm)
}
BattleForm::BattleForm(const BattleForm& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BattleForm* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.units_){from._impl_.units_}
    , decltype(_impl_.support_){nullptr}
    , decltype(_impl_.team_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_support()) {
    _this->_impl_.support_ = new ::pb_report::Unit(*from._impl_.support_);
  }
  _this->_impl_.team_id_ = from._impl_.team_id_;
  // @@protoc_insertion_point(copy_constructor:pb_report.BattleForm)
}

inline void BattleForm::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.units_){arena}
    , decltype(_impl_.support_){nullptr}
    , decltype(_impl_.team_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BattleForm::~BattleForm() {
  // @@protoc_insertion_point(destructor:pb_report.BattleForm)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BattleForm::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.units_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.support_;
}

void BattleForm::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BattleForm::Clear() {
// @@protoc_insertion_point(message_clear_start:pb_report.BattleForm)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.units_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.support_ != nullptr) {
    delete _impl_.support_;
  }
  _impl_.support_ = nullptr;
  _impl_.team_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BattleForm::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 team_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .pb_report.Unit units = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_units(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .pb_report.Unit support = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_support(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BattleForm::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_report.BattleForm)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 team_id = 1;
  if (this->_internal_team_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_team_id(), target);
  }

  // repeated .pb_report.Unit units = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_units_size()); i < n; i++) {
    const auto& repfield = this->_internal_units(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .pb_report.Unit support = 3;
  if (this->_internal_has_support()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::support(this),
        _Internal::support(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_report.BattleForm)
  return target;
}

size_t BattleForm::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb_report.BattleForm)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb_report.Unit units = 2;
  total_size += 1UL * this->_internal_units_size();
  for (const auto& msg : this->_impl_.units_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .pb_report.Unit support = 3;
  if (this->_internal_has_support()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.support_);
  }

  // uint32 team_id = 1;
  if (this->_internal_team_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_team_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BattleForm::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BattleForm::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BattleForm::GetClassData() const { return &_class_data_; }


void BattleForm::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BattleForm*>(&to_msg);
  auto& from = static_cast<const BattleForm&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pb_report.BattleForm)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.units_.MergeFrom(from._impl_.units_);
  if (from._internal_has_support()) {
    _this->_internal_mutable_support()->::pb_report::Unit::MergeFrom(
        from._internal_support());
  }
  if (from._internal_team_id() != 0) {
    _this->_internal_set_team_id(from._internal_team_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BattleForm::CopyFrom(const BattleForm& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb_report.BattleForm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleForm::IsInitialized() const {
  return true;
}

void BattleForm::InternalSwap(BattleForm* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.units_.InternalSwap(&other->_impl_.units_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BattleForm, _impl_.team_id_)
      + sizeof(BattleForm::_impl_.team_id_)
      - PROTOBUF_FIELD_OFFSET(BattleForm, _impl_.support_)>(
          reinterpret_cast<char*>(&_impl_.support_),
          reinterpret_cast<char*>(&other->_impl_.support_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BattleForm::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_report_2eproto_getter, &descriptor_table_report_2eproto_once,
      file_level_metadata_report_2eproto[2]);
}

// ===================================================================

class Ground::_Internal {
 public:
};

Ground::Ground(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pb_report.Ground)
}
Ground::Ground(const Ground& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Ground* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.attackerform_){from._impl_.attackerform_}
    , decltype(_impl_.defenderform_){from._impl_.defenderform_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb_report.Ground)
}

inline void Ground::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.attackerform_){arena}
    , decltype(_impl_.defenderform_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Ground::~Ground() {
  // @@protoc_insertion_point(destructor:pb_report.Ground)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Ground::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.attackerform_.~RepeatedPtrField();
  _impl_.defenderform_.~RepeatedPtrField();
}

void Ground::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Ground::Clear() {
// @@protoc_insertion_point(message_clear_start:pb_report.Ground)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.attackerform_.Clear();
  _impl_.defenderform_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Ground::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .pb_report.BattleForm attackerForm = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attackerform(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .pb_report.BattleForm defenderForm = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_defenderform(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Ground::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_report.Ground)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb_report.BattleForm attackerForm = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_attackerform_size()); i < n; i++) {
    const auto& repfield = this->_internal_attackerform(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .pb_report.BattleForm defenderForm = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_defenderform_size()); i < n; i++) {
    const auto& repfield = this->_internal_defenderform(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_report.Ground)
  return target;
}

size_t Ground::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb_report.Ground)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb_report.BattleForm attackerForm = 1;
  total_size += 1UL * this->_internal_attackerform_size();
  for (const auto& msg : this->_impl_.attackerform_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .pb_report.BattleForm defenderForm = 2;
  total_size += 1UL * this->_internal_defenderform_size();
  for (const auto& msg : this->_impl_.defenderform_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Ground::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Ground::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Ground::GetClassData() const { return &_class_data_; }


void Ground::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Ground*>(&to_msg);
  auto& from = static_cast<const Ground&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pb_report.Ground)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.attackerform_.MergeFrom(from._impl_.attackerform_);
  _this->_impl_.defenderform_.MergeFrom(from._impl_.defenderform_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Ground::CopyFrom(const Ground& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb_report.Ground)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ground::IsInitialized() const {
  return true;
}

void Ground::InternalSwap(Ground* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.attackerform_.InternalSwap(&other->_impl_.attackerform_);
  _impl_.defenderform_.InternalSwap(&other->_impl_.defenderform_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Ground::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_report_2eproto_getter, &descriptor_table_report_2eproto_once,
      file_level_metadata_report_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace pb_report
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb_report::Property*
Arena::CreateMaybeMessage< ::pb_report::Property >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb_report::Property >(arena);
}
template<> PROTOBUF_NOINLINE ::pb_report::Unit*
Arena::CreateMaybeMessage< ::pb_report::Unit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb_report::Unit >(arena);
}
template<> PROTOBUF_NOINLINE ::pb_report::BattleForm*
Arena::CreateMaybeMessage< ::pb_report::BattleForm >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb_report::BattleForm >(arena);
}
template<> PROTOBUF_NOINLINE ::pb_report::Ground*
Arena::CreateMaybeMessage< ::pb_report::Ground >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb_report::Ground >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
